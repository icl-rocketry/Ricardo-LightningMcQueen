#pragma once
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "Config/types.h"


class OLEDScreen{

  
  public:

    OLEDScreen(TwoWire& wire):
    display(SCREEN_WIDTH, SCREEN_HEIGHT, &wire, OLED_RESET){};
    
    void setupScreen(); //initialise led screen
    void updateScreen(); //general update method
    void updateBattV(float battV, float maxbattV);
    void updateDepV(float depV);
    void updateLogicV(float logicV);
    void updateState(std::string systemstatus);
  


  private:  
    void displayLogos();
    void displayICLRLogo();
    void displayNimbusLogo();

    std::string _systemstatus;
    float _battV = 0;
    float _depV = 0;
    float _logicV = 0;
    float _maxbattV = 16.8; //3s dont know why
  

    Adafruit_SSD1306 display;    
    static constexpr uint8_t SCREEN_WIDTH = 128;  //required for display setup
    static constexpr uint8_t SCREEN_HEIGHT = 32;
    static constexpr int8_t SCREEN_ADDRESS = 0x3C;
    static constexpr int8_t OLED_RESET = -1;

    static constexpr std::array<uint8_t,128> iclr_logo = {  //bitmap of iclr logo
    0x00, 0x0f, 0xf0, 0x00, 0x00, 0x7b, 0xfe, 0x00, 0x01, 0xbf, 0xfb, 0x80, 0x03, 0xe6, 0x66, 0xc0, 
    0x07, 0x9c, 0x41, 0xa0, 0x0f, 0x34, 0x3c, 0xf0, 0x1f, 0x74, 0x33, 0x68, 0x3e, 0x68, 0x0f, 0xbc, 
    0x3a, 0xc4, 0x1c, 0x1c, 0x76, 0x8c, 0x38, 0x6a, 0x7d, 0x1c, 0x23, 0xee, 0x6a, 0x70, 0x0f, 0xf6, 
    0xe0, 0x0c, 0x3f, 0x07, 0xef, 0xe0, 0x20, 0x37, 0xe8, 0x7c, 0x39, 0xff, 0xff, 0x9c, 0x0e, 0x07, 
    0xa0, 0x04, 0x20, 0x07, 0xe0, 0x7c, 0x39, 0xff, 0xbf, 0x9c, 0x3e, 0x07, 0xec, 0x00, 0x07, 0xe7, 
    0x21, 0xfc, 0x2f, 0xf6, 0x77, 0xf4, 0x03, 0xea, 0x57, 0x81, 0x10, 0x0e, 0x3a, 0x10, 0x0d, 0xd4, 
    0x3c, 0x30, 0x0e, 0x3c, 0x1e, 0xe2, 0x47, 0x78, 0x0f, 0x46, 0x62, 0xf0, 0x07, 0x9f, 0xf9, 0xe0, 
    0x03, 0xe3, 0xc7, 0xc0, 0x01, 0xdf, 0xff, 0x80, 0x00, 0x7f, 0xde, 0x00, 0x00, 0x0f, 0xf0, 0x00
    };

    static constexpr std::array<uint8_t,16*32> nimbus_logo = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x00, 0x06, 0x31, 0x80, 0x00, 0x06, 0x3F, 0xFF, 0xE0, 0x30, 0x00, 0x06, 0x07, 0xFF, 0xFE,
    0x38, 0x00, 0x06, 0x31, 0xC0, 0x00, 0x0E, 0x3F, 0xFF, 0xF8, 0x30, 0x00, 0x06, 0x0F, 0xFF, 0xFC,
    0x38, 0x00, 0x06, 0x31, 0xE0, 0x00, 0x1E, 0x00, 0x00, 0x1C, 0x30, 0x00, 0x06, 0x1C, 0x00, 0x00,
    0x3C, 0x00, 0x06, 0x31, 0xF0, 0x00, 0x3E, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x06, 0x38, 0x00, 0x00,
    0x3E, 0x00, 0x06, 0x31, 0x38, 0x00, 0x76, 0x00, 0x00, 0x0E, 0x30, 0x00, 0x06, 0x30, 0x00, 0x00,
    0x37, 0x00, 0x06, 0x31, 0x9C, 0x00, 0xE6, 0x00, 0x00, 0x06, 0x30, 0x00, 0x06, 0x30, 0x00, 0x00,
    0x33, 0x80, 0x06, 0x31, 0x8E, 0x01, 0xC6, 0x00, 0x00, 0x06, 0x30, 0x00, 0x06, 0x30, 0x00, 0x00,
    0x31, 0xC0, 0x06, 0x31, 0x87, 0x03, 0x86, 0x00, 0x00, 0x06, 0x30, 0x00, 0x06, 0x30, 0x00, 0x00,
    0x30, 0xC0, 0x06, 0x31, 0x83, 0x87, 0x06, 0x00, 0x00, 0x0E, 0x30, 0x00, 0x06, 0x30, 0x00, 0x00,
    0x30, 0xE0, 0x06, 0x31, 0x81, 0xCE, 0x06, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x06, 0x38, 0x00, 0x00,
    0x30, 0x40, 0x06, 0x31, 0x80, 0xFC, 0x06, 0x00, 0x00, 0x1C, 0x30, 0x00, 0x06, 0x1C, 0x00, 0x00,
    0x30, 0x00, 0x06, 0x31, 0x80, 0x78, 0x06, 0x3F, 0xFF, 0xF8, 0x30, 0x00, 0x06, 0x0F, 0xC1, 0xE0,
    0x30, 0x00, 0x06, 0x31, 0x80, 0x30, 0x06, 0x3F, 0xFF, 0xF0, 0x30, 0x00, 0x06, 0x07, 0xC3, 0xF0,
    0x30, 0x00, 0x06, 0x31, 0x80, 0x00, 0x06, 0x00, 0x00, 0x38, 0x30, 0x00, 0x06, 0x00, 0x00, 0x38,
    0x30, 0x03, 0x06, 0x31, 0x80, 0x00, 0x06, 0x00, 0x00, 0x1C, 0x30, 0x00, 0x06, 0x00, 0x00, 0x1C,
    0x30, 0x03, 0x86, 0x31, 0x80, 0x00, 0x06, 0x00, 0x00, 0x0C, 0x30, 0x00, 0x06, 0x00, 0x00, 0x0C,
    0x30, 0x01, 0xC6, 0x31, 0x80, 0x00, 0x06, 0x00, 0x00, 0x06, 0x30, 0x00, 0x06, 0x00, 0x00, 0x0E,
    0x30, 0x00, 0xC6, 0x31, 0x80, 0x00, 0x06, 0x00, 0x00, 0x06, 0x30, 0x00, 0x06, 0x00, 0x00, 0x06,
    0x30, 0x00, 0xE6, 0x31, 0x80, 0x00, 0x06, 0x00, 0x00, 0x06, 0x30, 0x00, 0x0E, 0x00, 0x00, 0x06,
    0x30, 0x00, 0x76, 0x31, 0x80, 0x00, 0x06, 0x00, 0x00, 0x0E, 0x30, 0x00, 0x0C, 0x00, 0x00, 0x0E,
    0x30, 0x00, 0x3E, 0x31, 0x80, 0x00, 0x06, 0x00, 0x00, 0x0C, 0x18, 0x00, 0x1C, 0x00, 0x00, 0x0C,
    0x30, 0x00, 0x1E, 0x31, 0x80, 0x00, 0x06, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x38, 0x00, 0x00, 0x1C,
    0x30, 0x00, 0x0E, 0x31, 0x80, 0x00, 0x06, 0x3F, 0xFF, 0xF8, 0x0F, 0xC1, 0xF0, 0x3F, 0xFF, 0xF8,
    0x30, 0x00, 0x06, 0x31, 0x80, 0x00, 0x06, 0x3F, 0xFF, 0xF0, 0x07, 0xC3, 0xE0, 0x3F, 0xFF, 0xF0,
    0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0x80, 0x00, 0x81, 0x00, 0x3F, 0xFF, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };


    static constexpr int CHARGE_AREA_START_Y = 2; //x-position of start of charge area on screen
    static constexpr int CHARGE_AREA_START_X = 115; //y-position of start of charge area on screen
    uint8_t chargebars;

    uint32_t timeEnteredSetup;
    static constexpr uint16_t nimbusLogoDelay = 3000;
    static constexpr uint16_t iclrLogoDelay = 3000;
    static constexpr uint16_t setupDelay = nimbusLogoDelay + iclrLogoDelay;
};

